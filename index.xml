<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Parthenon</title>
    <link>http://jijeshmohan.github.io/</link>
    <description>Recent content on Parthenon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c), Jijesh Mohan; all rights reserved.</copyright>
    <lastBuildDate>Sun, 27 Dec 2015 22:44:24 +0530</lastBuildDate>
    <atom:link href="http://jijeshmohan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compress http request payload in go</title>
      <link>http://jijeshmohan.github.io/post/compress-http-request-in-go/</link>
      <pubDate>Sun, 27 Dec 2015 22:44:24 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/compress-http-request-in-go/</guid>
      <description>&lt;p&gt;My current project is using golang for the API server. There are multiple type of consumers, including mobile, web and even Smart TV ( in future ) for this API endpoints. One of the API is to send telemetry data from the client which is in json format. Due to the offline feature there are cases where the payload can be huge ( more than 1000 telemetry events in one request).&lt;/p&gt;

&lt;p&gt;We did a calculation on the time it takes to sync 1000 events in one request in various network conditions and the results are:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://jijeshmohan.github.io/img/compress-http-result1.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;To reduce this time, we tried to use couple of binary serialization technique like Messagepack, protocol buffer etc. but due to the variety of the platforms, we need to support pure JSON format in some cases. So that it leads us to check the normal compression support like any modern web server supports for http response.&lt;/p&gt;

&lt;p&gt;This helped us to continue with the same api endpoint with json format itself and with the help of ‘content-format’ header, endpoint determine whether it is a compressed content or not.&lt;/p&gt;

&lt;p&gt;The power of golang reader interface can be seen here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
func getData(r *http.Request) (*TelemetryEvents, error) {
	var data TelemetryEvents
	var decoder *json.Decoder
	switch r.Header.Get(&amp;quot;Content-Encoding&amp;quot;) {
	case &amp;quot;gzip&amp;quot;:
		gz, err := gzip.NewReader(r.Body)
		if err != nil {
			return nil, err
		}
		defer gz.Close()
		decoder = json.NewDecoder(gz)
	default:
		decoder = json.NewDecoder(r.Body)
	}
	err := decoder.Decode(&amp;amp;data)
	if err != nil {
		return nil, err
	}
	return &amp;amp;data, nil
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we have achieved the below numbers without any memory allocation overhead&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://jijeshmohan.github.io/img/compress-http-result2.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gorilla mux - Issue with order of routes</title>
      <link>http://jijeshmohan.github.io/post/gorillamux/</link>
      <pubDate>Tue, 24 Mar 2015 22:44:24 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/gorillamux/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;gorillatoolkit.org&#34;&gt;Gorilla toolkit&lt;/a&gt; is one of the favorite http multiplexer library of gophers. I have been using the gorilla mux for quite sometime for micro services.
Mux allows you to define both static and dynamic routes.&lt;/p&gt;

&lt;p&gt;Gorilla mux allows you to add similar routes unlike other multiplexer libraries like http-router. Consider the following scenario&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;router.Handle(&amp;quot;/user/{name}&amp;quot;,userHandle)
router.Handle(&amp;quot;/user/admin&amp;quot;,adminHandle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you hit &lt;code&gt;/user/user1&lt;/code&gt; as expected &lt;code&gt;userHandle&lt;/code&gt; function will be called.
But where as in the case of &lt;code&gt;/user/admin&lt;/code&gt; the &lt;code&gt;userHandle&lt;/code&gt; will be called instead of &lt;code&gt;adminHandle&lt;/code&gt;. This means the order of routes matter. Whichever route matches first, will be called by gorilla mux.&lt;/p&gt;

&lt;p&gt;One way to fix this issue is to change the order of routes in the above code. This is easy when you have very less number of routes but will become very tedious when the number of routes increases.&lt;/p&gt;

&lt;p&gt;There is another way to handle this issue is to sort the routes depends on the length of the path and also ensure that static routes comes before dynamic routes.&lt;/p&gt;

&lt;p&gt;Implement &lt;a href=&#34;https://golang.org/src/sort/sort.go#12&#34;&gt;sort&lt;/a&gt; interface of golang for the endpoints and sort it before adding it to mux router. You can find the implementation  &lt;a href=&#34;https://github.com/jijeshmohan/janus/blob/master/rest/endpoint.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redcukes</title>
      <link>http://jijeshmohan.github.io/post/redcukes/</link>
      <pubDate>Wed, 21 Mar 2012 17:46:00 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/redcukes/</guid>
      <description>&lt;p&gt;I have seen projects where userstories are managed in redmine along with acceptance criteria. But while automating with cucumber all these stories and scenarios are again replicated in cucumber feature files. This leads to inconsistency due to the story modification in redmine which is not synced with cucumber feature files.&lt;/p&gt;

&lt;p&gt;To avoid this problem I have developed a ruby gem called &lt;a href=&#34;https://github.com/jijeshmohan/redcukes&#34;&gt;Redcukes&lt;/a&gt; for integrating redmine with cucumber and we can run cucumber against the user stories stored in redmine and update execution status back to redmine.&lt;/p&gt;

&lt;p&gt;For using this gem, make sure that the REST API is enabled in redmine (&lt;code&gt;Administration &amp;gt; Settings -&amp;gt; Authentication -&amp;gt; Enable REST web service&lt;/code&gt;). It is better to define another user role for cucumber tests with required issue modification rights.&lt;/p&gt;

&lt;p&gt;Install gem using gem install redcukes. In cucumber projects directory, create env.rb under support directory.&lt;/p&gt;

&lt;p&gt;Edit env.rb file and add following configuration&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;redcukes&#39;

Redcukes::Redmine.configure do |config|
 config.site = redmine url
 config.user = redmine username
 config.password = redmine password
 end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is also possible to add issue filter using search_filter property&lt;/p&gt;

&lt;p&gt;e.g : &lt;code&gt;config.search_filter = {:project_id =&amp;gt; ‘iframe’,:tracker_id =&amp;gt; 2}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The default status updates are “Resolved” or “Rejected” according to feature passed or failed. This can be customized like below&lt;/p&gt;

&lt;p&gt;e.g &lt;code&gt;config.result_status = {:passed =&amp;gt; 7,:failed =&amp;gt; 8}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have created two more issue status called Passed, Failed and gave given these status ids in the above configuration.&lt;/p&gt;

&lt;p&gt;This will be a perfect executable documentation for your project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tracker control plugin for redmine</title>
      <link>http://jijeshmohan.github.io/post/tracker-control-plugin-for-redmine/</link>
      <pubDate>Sat, 24 Dec 2011 17:46:00 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/tracker-control-plugin-for-redmine/</guid>
      <description>

&lt;p&gt;For the last couple of months I have started using redmine project management tool for my official work . The tool has most of the features including issue tracker, built-in wiki, forum and can even integrate SCM. Redmine is developed in ruby on rails platform and supports plug-ins which helps to add new features to the tool.&lt;/p&gt;

&lt;p&gt;One of the feature which my team was looking at is to control the tracker wise issue creation, for example developers should not be able to create new requirement(tracker) issue. Redmine has access permission only in the issue creation level but not in tracker wise.&lt;/p&gt;

&lt;p&gt;To add the above functionality to redmine, I have created a new redmine plugin called &lt;a href=&#34;http://www.redmine.org/plugins/redmine_track_control&#34;&gt;Redmine Tracker Control&lt;/a&gt;. The plugin supports following &lt;strong&gt;features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Role based permission for creating issue with specific Tracker&lt;/li&gt;
&lt;li&gt;Project Module to enable/disable tracker permission&lt;/li&gt;
&lt;li&gt;Projects which are not enabled for tracker control module, uses default redmine behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;installation:5beec7d8a923c135a36310f797fc47a6&#34;&gt;Installation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Copy redmine_track_control directory to &lt;code&gt;#{RAILS_ROOT}/vendor/plugins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart Redmine&lt;/li&gt;
&lt;li&gt;Goto &lt;code&gt;Redmine -&amp;gt; Administration -&amp;gt; Roles and Permissions  -&amp;gt; Permissions report&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure the permissions in Tracker Permissions section&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://jijeshmohan.github.io/img/track_control.jpg&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;To enable tracker permissions to project, Go to the &lt;code&gt;project -&amp;gt; Settings -&amp;gt; Modules&lt;/code&gt; and enable Tracker Permissions Module&lt;/p&gt;

&lt;p&gt;You can download plugin from &lt;a href=&#34;https://github.com/jijeshmohan/redmine_track_control&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jUnit – Readable test names</title>
      <link>http://jijeshmohan.github.io/post/junit-readable-test-names/</link>
      <pubDate>Sat, 17 Dec 2011 17:46:00 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/junit-readable-test-names/</guid>
      <description>&lt;p&gt;Java camel-case function names are readable if it has only two or three words in it. Test names are little longer for specifying the context and what it’s testing. This is anyway better than adding a detailed comment for the test which will get outdated pretty soon.&lt;/p&gt;

&lt;p&gt;The problem comes when reading the jUnit test report which contains big names. It is hard to read such test names. Here are some of the tests from the famous webdriver project:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://jijeshmohan.github.io/img/junit_eclipse_plugin_1.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;These are pretty long names, Isn’t it!&lt;/p&gt;

&lt;p&gt;One option to make it readable is to use snake-case
&lt;code&gt;eg. test_should_return_null_when_getting_the_value_of_an_attribute_that_is_not_listed.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But this will be a violation towards java coding style, Also it is difficult to follow two standards in TDD(snake-case for tests and camel-case for normal functions).&lt;/p&gt;

&lt;p&gt;Another option is to make a custom runner in jUnit which converts camel-case tests names to readable text (humanize) . Here is the code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ReadableTest extends BlockJUnit4ClassRunner {
 @Override
 protected String testName(FrameworkMethod method) {
 	return StringUtil.humanize(method.getMethod().getName());
 }
 public ReadableTest(Class&amp;lt;?&amp;gt; klass) throws InitializationError {
    super(klass);
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Annotate the jUnit Test class with this runner &lt;code&gt;eg: @RunWith(ReadableTest.class)&lt;/code&gt; and run your tests.&lt;/p&gt;

&lt;p&gt;That’s it. See the following screenshot&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://jijeshmohan.github.io/img/junit_eclipse_plugin.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The same humanized test names can be seen in Jenkins also.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChromeWatir 1.5 released</title>
      <link>http://jijeshmohan.github.io/post/chromewatir1.5/</link>
      <pubDate>Fri, 20 Feb 2009 17:46:00 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/chromewatir1.5/</guid>
      <description>&lt;p&gt;We have released a new version of ChromeWatir. You can get the gem or source from the &lt;a href=&#34;http://code.google.com/p/chrome-watir&#34;&gt;project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is new in this release&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for table and file field elements&lt;/li&gt;
&lt;li&gt;Support for Element Collections like links, images, etc.&lt;/li&gt;
&lt;li&gt;Refactoring and fixing defects in launcher code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for everyone who helped and encouraged us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChromeWatir - Watir for google chrome</title>
      <link>http://jijeshmohan.github.io/post/chromewatir/</link>
      <pubDate>Fri, 09 Jan 2009 17:46:00 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/post/chromewatir/</guid>
      <description>&lt;p&gt;I am happy to announce that the first version of ChromeWatir has been released today. ChromeWatir is a port of watir for google chrome browser. The API follows a similar convention to Watir but there are a few differences. Please visit the &lt;a href=&#34;http://code.google.com/p/chrome-watir/&#34;&gt;ChromeWatir Google code&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;We are in the process of making it better by stabilizing it as well adding more functionality.&lt;/p&gt;

&lt;p&gt;The first release is available as gem as well as source in the downloads page. Please have a try and give the feedback :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://jijeshmohan.github.io/about/</link>
      <pubDate>Thu, 24 Jan 2008 17:38:11 +0530</pubDate>
      
      <guid>http://jijeshmohan.github.io/about/</guid>
      <description>

&lt;p&gt;I am &lt;strong&gt;Jijesh Mohan&lt;/strong&gt; living in Bangalore. Currently working at &lt;a href=&#34;http://www.sahajsoft.com/&#34;&gt;Sahaj&lt;/a&gt;.  This is the platform where I place most of my personal writings. I enjoy building softwares. My other interests are in photography and traveling.&lt;/p&gt;

&lt;h3 id=&#34;some-of-my-works:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Some of my works:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jijeshmohan/janus&#34;&gt;Janus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/varnamproject&#34;&gt;Varnam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jijeshmohan.github.io/logviewer&#34;&gt;Logviewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jijeshmohan/redcukes&#34;&gt;Redcukes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;profiles:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Profiles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jijeshmohan&#34;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/jijeshmohan&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>